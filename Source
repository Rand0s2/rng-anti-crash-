-- Variable to control the on/off state
local isHighlightingEnabled = true

-- Original highlight color
local originalHighlightColor = BrickColor.new("Bright red")
local alternateHighlightColor = BrickColor.new("Bright green")

-- Function to highlight a part or model
local function highlightObject(object)
    if object:IsA("BasePart") then
        if isHighlightingEnabled then
            object.BrickColor = originalHighlightColor
        else
            object.BrickColor = alternateHighlightColor
        end
    elseif object:IsA("Model") then
        local humanoid = object:FindFirstChildOfClass("Humanoid")
        if not humanoid then
            for _, part in pairs(object:GetDescendants()) do
                if part:IsA("BasePart") then
                    if isHighlightingEnabled then
                        part.BrickColor = originalHighlightColor
                    else
                        part.BrickColor = alternateHighlightColor
                    end
                end
            end
        end
    end
end

-- Function to check if an object should be excluded
local function shouldObjectBeExcluded(object)
    return object:IsDescendantOf(game.Players)
end

-- Function to delete bright red objects
local function deleteBrightRedObject(object)
    task.defer(function()
        if object:IsA("BasePart") and object.BrickColor == originalHighlightColor then
            object:Destroy()
        elseif object:IsA("Model") then
            for _, part in pairs(object:GetDescendants()) do
                if part:IsA("BasePart") and part.BrickColor == originalHighlightColor then
                    object:Destroy()
                    break
                end
            end
        end
    end)
end

-- Function to toggle the highlighting
local function toggleHighlighting()
    isHighlightingEnabled = not isHighlightingEnabled
    local newColor = isHighlightingEnabled and originalHighlightColor or alternateHighlightColor
    for _, object in pairs(workspace:GetDescendants()) do
        if object:IsA("BasePart") then
            object.BrickColor = newColor
        elseif object:IsA("Model") then
            highlightObject(object)
        end
    end
end

-- Highlight all existing parts and models in specified services (excluding players and their models)
local servicesToHighlight = {
    workspace,
    game:GetService("Lighting"),
    game:GetService("ReplicatedStorage"),
    game:GetService("ReplicatedFirst"),
    game:GetService("ServerScriptService"),
    game:GetService("ServerStorage"),
    game:GetService("StarterPack"),
    game:GetService("StarterPlayer"),
    game:GetService("StarterGui"),
    game:GetService("SoundService"),
    game:GetService("Teams"),
    game:GetService("Chat"),
    game:GetService("TestService"),
    game:GetService("PhysicsService"),
    game:GetService("LocalizationService")
}

for _, service in pairs(servicesToHighlight) do
    for _, object in pairs(service:GetDescendants()) do
        if not shouldObjectBeExcluded(object) then
            highlightObject(object)
        end
    end
end

-- Connect a function to run when new parts or models are added to the services
local function onChildAdded(newChild)
    if not shouldObjectBeExcluded(newChild) then
        highlightObject(newChild)
        deleteBrightRedObject(newChild)
    end
end

for _, service in pairs(servicesToHighlight) do
    service.ChildAdded:Connect(onChildAdded)
end

-- Function to handle the keybind
local function onKeyPress(input)
    if input.KeyCode == Enum.KeyCode.F3 then -- Change the keybind to F3
        toggleHighlighting()
    end
end

-- Connect the onKeyPress function to the UserInputService
game:GetService("UserInputService").InputBegan:Connect(onKeyPress)
